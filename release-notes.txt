Release notes for Galant, most recent first.

===============================================
Since 6.1.1

- status bar now shows edit state to make it easier for user to track undo/redo operations
- bug fix: addition and deletion of nodes/edges in context of undo/redo now works correctly
- bug fix: edit state now restored correctly when animation terminates
- toggling directed/undirected property of graph in graph window has no effect on text representation of graph: this allows user to easily run, e.g., shortest paths algorithms, both ways without altering graph; directedness can still be modified using the text editor

================================================
Since 6.1

Bug fixes

- layered graph algorithms now work again (edge id's were reintroduced)
- setDirected() invoked during an algorithm now works as advertised for getOutgoingEdges() and getIncomingEdges() of a node

================================================

Since 6.0.2 (need to download latest commit)

User

- added ability to undo and redo while editing
- added a script to produce random trees

Animator

- the functions for retrieving user-defined attribute values now throw exceptions if the value of the right type for the attribute does not exist; for example, if you do set(n,"a",3) and later getDouble(n,"a"), an exception will result because n has *Integer* attribute "a" but not Double attribute; this applies to user-defined attributes only, not built-in ones such as "id", "x", "y", "label", "weight", "color" (don't mess with those)

- in connection with the above, there are methods of the form. e.g., hasDouble(n,"a")

==================================================

v6.0.2

User

- dijkstra is now interactive and uses positions to calculate edge weights if they don't exist

Animator

- display and print now take multiple arguments, each can be an arbitrary object

Researcher

- some improvements in drawing layered graphs

====================================================
v6.0.1

User

- problem with “dirty” graph files is solved, i.e., graph files are marked as modified (and trigger a query when closing) if and only if the user intentionally edited the graph

Animator

- made dfs_scc interactive

- made euclidian (version of Dijkstra’s) algorithm interactive

=====================================================
v6.0

User

- selected edges are dashed during editing, nodes are shaded cyan

- visibility of labels/weights on nodes/edges can be toggled during execution, either by the algorithm or by the user

- faster reaction to display state changes

- elimination of a bug that caused Galant to hang if animation was terminated
  during an active query or sometimes in the middle of an algorithm that did
  lots of possibly unmatched beginStep()'s and endSteps()'s

Animator

- functions getNode(String prompt, NodeSet set, String errorMessage) and the
  corresponding one for edges, to prompt the user for a node/edge and require
  that it be in a specified set; the errorMessage is reported if the
  node/edge is not in the set

- new NodePriorityQueue and EdgePriorityQueue methods as well as ability to
  define a max heap using an optional boolean argument; these include
  removeMax, removeBest and changeKey (as an alternative to decreaseKey)

- the priority queues and the sort function can use an optional comparator
  based on a different attribute than weight, e.g., sort(edges,
  getStringComparator("label"))

- functions that return sets of neighbors, incident edges, incoming edges and
  outgoing edges for a node (instead of lists) [still in the works]

- functions that sets of return *visible* neighbors, etc.

- function step() that is essentially synonym for 'endStep(); beginStep()';
  allows setting of generic breakpoints without worrying about matched pairs;
  used in dominance.alg and interactive_dfs.alg

- more protection from Java null pointer and other low level exceptions

Developer

- put NodePriorityQueue and EdgePriorityQueue into the graph.container package
